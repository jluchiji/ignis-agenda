{"version":3,"sources":["define.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBwB,MAAM;;;;;;;;;qBATN,OAAO;;;;yBACP,YAAY;;IAAxB,IAAI;;AAEhB,IAAM,KAAK,GAAG,wBAAM,qBAAqB,CAAC,CAAC;;;;;;AAM5B,SAAS,MAAM,CAAC,IAAI,EAAE;;;;;;AAGnC,MAAI,IAAI,CAAC,UAAU,EAAE;AAAE,QAAI,GAAG,IAAI,WAAQ,CAAC;GAAE;;;cAGJ,IAAI;MAArC,IAAI,SAAJ,IAAI;4BAAE,OAAO;MAAP,OAAO,iCAAG,EAAG;MAAE,OAAO,SAAP,OAAO;;;AAGpC,MAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,UAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;GAChD;AACD,MAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACjC,UAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;GACrD;;;AAGD,MAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;;AAExB,SAAK,eAAa,IAAI,CAAG,CAAC;AAC1B,QAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,GAAG,EAAE,IAAI;aAAK,OAAO,QAAO,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;KAAA,CAAC;AACzE,QAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;GAC9C,MAAM;;AAEL,SAAK,iBAAe,IAAI,CAAG,CAAC;AAC5B,QAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,GAAG,EAAE,IAAI;aACzB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAO,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;KAAA,CAAC;AAC7D,QAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;GAC9C;CAEF","file":"define.js","sourcesContent":["/**\n * define.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport Debug       from 'debug';\nimport * as Util   from 'ignis-util';\n\nconst debug = Debug('ignis:agenda:define');\n\n\n/*!\n * Defines a task processor.\n */\nexport default function define(task) {\n\n  /* Allow ES6 modules */\n  if (task.__esModule) { task = task.default; }\n\n  /* Setup wrapped task */\n  const { name, options = { }, handler } = task;\n\n  /* Do not allow malformed tasks */\n  if (typeof name !== 'string') {\n    throw new Error('task.name must be a string.');\n  }\n  if (typeof handler !== 'function') {\n    throw new Error('task.handler must be a function.');\n  }\n\n  /* Wrap tasks as appropriate */\n  if (handler.length === 4) {\n    /* handler(ignis, data, job, done): has an explicit callback */\n    debug(`[normal] ${name}`);\n    const callback = (job, done) => handler(this, job.attrs.data, job, done);\n    this.agenda._define(name, options, callback);\n  } else {\n    /* handler(ignis, data, job): does not have an explicit callback */\n    debug(`[promised] ${name}`);\n    const callback = (job, done) =>\n      Util.unpromisify(handler)(this, job.attrs.data, job, done);\n    this.agenda._define(name, options, callback);\n  }\n\n}\n"],"sourceRoot":"/source/"}